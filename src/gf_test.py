# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import gf
# from gf import *
import time


def test_prime_factors():
  for d, f in gf.PRIME_FACTORS.items():
    prod = 1
    for p in f:
      assert p == 3 or pow(3, p, p) == 3
      prod *= p
    assert prod == 2**d - 1


def test_fields(log=False):
  for n, f in gf.defined_fields():
    try:
      g = f.get_generator()
    except Exception:
      # probably because the factorization could not be found.
      g = "could not determine"
    if log:
      print(f"{f.name} degree:{f.degree()}, g:{g}, sparse_poly:{f.sparse_poly}"
            f" is_primitive:{gf.is_primitive(f.poly)}")
    assert n == f.name
    assert g**(2**f.degree()) == g


def test_absolute_trace(log=False):
  if log:
    print("test_absolute_trace")
  for n, f in gf.defined_fields():
    for i in range(1, f.degree()):
      x = f(2**i)
      y = f(2**i + 1)
      z = x * y
      assert z.absolute_trace().poly == 0


def test_quadratic():
  print("test quadratic")
  for n, f in gf.defined_fields():
    r = f(7)
    s = f(11)
    a = f(1)
    b = r + s
    c = r * s
    x, y = gf.solve_quadratic(a, b, c)
    assert x + y == b
    assert x * y == c


def test_log():
  start = time.time()
  x = F128(2)
  exp = 1234567890123456789
  log = (x**exp).log()
  print(exp, log, time.time() - start)
  assert exp == log

LogTab = [
  ([0, 1], 338793687469689340204974836150077311399),
  ([0, 3], 303558123021439059071380884404208295340),
  ([0, 5], 241888702374857103606637766361309420282),
  ([0, 7], 172312188190953257437364532976931285362),
  ([0, 9], 90135629905341144392615610023691881447),
  ([0, 11], 320968231624997681388103974800819054222),
  ([0, 13], 146028954495617964545987384249087697366),
  ([0, 15], 174431024260004726300799109825431334981),
  ([0, 17], 43354163867748369913837047752442479507),
  ([0, 19], 166309310794466653106821763992806056658),
  ([0, 21], 10122070398971678464299064647018832727),
  ([0, 23], 176172148432860411353091297047774963209),
  ([0, 25], 25059378342070325812399431854468577445),
  ([0, 27], 82337404383411568351828302667386210404),
  ([0, 29], 154308405623621465498789311981037150468),
  ([0, 31], 281962849359028748300443180399275985554),
  ([0, 33], 84310560836742685473251106341254189172),
  ([0, 35], 161176538086709207864777980213760340433),
  ([0, 37], 240555376584195016964845130611778835031),
  ([0, 39], 199476126739061372413075564704044950691),
  ([0, 41], 212465905260987241698262494563262795155),
  ([0, 43], 86446608147970414853620140172573206417),
  ([0, 45], 339948324434206556926015381786142929675),
  ([0, 47], 168594966625308060623952045282099726281),
  ([0, 49], 159742513128255460002829808765007875463),
  ([0, 51], 37748808129867136324955221382965661996),
  ([0, 53], 204159665245856805916142178351597743635),
  ([0, 55], 274685949221817941540512120920981844968),
  ([0, 57], 248678053080204354097041913436501532869),
  ([0, 59], 117339386279278234153031825366451180496),
  ([0, 61], 149959828486495606566429045130885643678),
  ([0, 63], 253830211379654026555570522383120366226),
  ([0, 65], 18695476046237426955479088686940191898),
  ([0, 67], 119099499227357360572227408023933936409),
  ([0, 69], 309317878544564400036807980850908538135),
  ([0, 71], 228919440781689981952276596154866429976),
  ([0, 73], 18111346741816027620081479390064605578),
  ([0, 75], 327923132338822839477581811004933903733),
  ([0, 77], 38768548182518977309500731797368635986),
  ([0, 79], 119484254709476150067662010671143006636),
  ([0, 81], 180422934054831662830607317834121550951),
  ([0, 83], 276486673412366988092541146417734047157),
  ([0, 85], 55529114527624391413503105128603145379),
  ([0, 87], 199954761968035103295313917899238084413),
  ([0, 89], 74038683932219503834870613751998562641),
  ([0, 91], 39492401526353309977079790920069728962),
  ([0, 93], 98096625099306075381694798702647662706),
  ([0, 95], 77149264492753194141812143594598151229),
  ([0, 97], 314011713368263192680762609460553903238),
  ([0, 99], 101789523572337511733688965117093390448),
  ([0, 101], 245706063643643128603958843003443651300),
  ([0, 103], 67461642341225529332423522939988565396),
  ([0, 105], 183619228698319307452978070619327296932),
  ([0, 107], 237008093973690113680597633107655228975),
  ([0, 109], 76741379632048405595689619507403091777),
  ([0, 111], 140483319588027974898498034329598523527),
  ([0, 113], 209692264681800951551147837907288384404),
  ([0, 115], 122543640499425604748670645142468149605),
  ([0, 117], 137212985178217285728878617286696504441),
  ([0, 119], 12613519765743959293588559259586752915),
  ([0, 121], 305046802472688182329780655685899195389),
  ([0, 123], 182098611218619793101352480189846354786),
  ([0, 125], 146851573659670022183057283503725250006),
  ([0, 127], 159780787735816569918614120704779278446)
]


def test_log2():
  for a,b in LogTag:
    c = F128(a).log()
    assert b == c


if __name__ == "__main__":
  test_prime_factors()
  test_quadratic()
  test_fields(log=True)
  test_absolute_trace(log=True)
  test_log()
