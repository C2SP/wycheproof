# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import dsa
from dataclasses import dataclass
from typing import Optional, List, Tuple, Union
import util
import prand


def key1024(md: str):
  return dsa.DsaPrivateKey(
      md=md,
      p=int('1259090521098919804081098449941345504501849730261461892887657005'
            '9116566135022745505765189826518446387879003599597964197476929876'
            '6666007294137341988961002396326633861686590567974071021205020445'
            '1915329364526704742956529774509052333870768766031117233587795661'
            '27573687747339654386629970469863715546160013828453663'),
      q=1056413542393837569701352266926264320086016035249,
      g=int('5765000767467393288166750512052535170335436493856242766674391883'
            '7557109683846274456167320552595881933911533629107438522023395888'
            '8336318240516182404316355395705869823092351680351158870687246918'
            '4973739797075393786289883260873803546205062962407514735272532940'
            '701170083891663946037110571887628259451793637989005'),
      x=639404073978645358852179395984903955976636812280)


def key2048(md: str):
  'key with 224-bit q and 2048 bit p'
  return dsa.DsaPrivateKey(
      md=md,
      p=int('181118486631420055711787706248812146965913392568235070235446058914'
            '1170708161715231951918020125044061516370042605439640379530343556'
            '4101919053459832890139496933938670005799610981765220283775567361'
            '4836626483403394052203488713085936276470766894079318754834062443'
            '1033792580942743268186462355159813630244169054658542719322425431'
            '4088256212718983105131138772434658820375111735710449331518776858'
            '7867938758654181244292694091187568128410190746310049564097068770'
            '8161261634790060655580211122402292101772553741704724263582994973'
            '9109274666495826205002104010355456981211025738812433088757102520'
            '562459649777989718122219159982614304359'),
      q=19689526866605154788513693571065914024068069442724893395618704484701,
      g=int('2859278237642201956931085611015389087970918161297522023542900348'
            '0877180630984239764282523693409675060100542360520959501692726128'
            '3149190229583566074777557293475747419473934711587072321756053067'
            '2532404847508798651915566434553729839971841903983916294692452760'
            '2490198571084091890169933809199002313226100830607842692992570749'
            '0504363602970812128803790973955960534785317485341020833424202774'
            '0275688698461842637641566056165699733710043802697192696426360843'
            '1736206792141319514001488556117408586108219135730880594044593648'
            '9237302749293603778933701187571075920849848690861126195402696457'
            '4111219599568903257472567764789616958430'),
      x=15382583218386677486843706921635237927801862255437148328980464126979)


TEST_PARAMS = {
    (1024, 160):
        (int('9565082121154755517982476359553030921054221351791078833132817170'
             '2760602882161241394218371156675761385533902871915132985235251338'
             '1859019033125956642298601219979786761376884079997968226595969425'
             '4647300279424079770906084519527689382725457524521525020395437370'
             '5973799252467410320600385814937029298392172193442789'),
         int('775824116315350653447108357325469066101014116729'),
         int('3320863427944282665590551334506399646233916138281452322751417684'
             '1794661481830248062269699193498404523586163662845515929206000943'
             '3416604029118804682701974225747134410824898620890199729721237119'
             '6350061416232048604000708658185360837016035606998555244152970235'
             '8388993477666096896779435564275758062015554109123246')),
    (2048, 224):
        (int('2971125432688335717873952694928286612385731084024660475788305561'
             '3003328643022795647131298071937304415948858940020082032556250600'
             '7186554166448385584172811118878442694492965965147790661559087399'
             '9031919387251837301044803858411734654529024100776744846121591350'
             '1228544667653725685057269660636908903407602159761960686254118999'
             '7507397438891491944201281598868877507371299635576712013635317065'
             '8161338915393516400177592256311658845253976355484266154785738100'
             '4045749328119251879876472989033771800813536445093012294247801103'
             '6772101350883243954915954021860539113260535241935538143285860436'
             '16008719694334492965146446601603334234009'),
         int('2344029094031876708821992528204855001851908480981165621658402221'
             '7157'),
         int('2197058117452123482773655485130584863889820806546588210277949809'
             '8138189591074921432006431762760560232469111892998271155865153630'
             '9981993481061519322945311509793158771336672933112322637674981689'
             '8926742453316791202264917137287878696386582042854574932515659048'
             '5686963257337612708646278398360038105335140726286845079983454065'
             '1035455654778676389454521373075041282846706568712814391565819388'
             '8782369856734272552274052215795278646645958043341780096309290430'
             '9711622974375412464199971932301577349060034946956278897499018329'
             '1615424564501242870674835841231230635986248823024194240805721573'
             '60355722838665554203335892158264356739331')),
    (2048, 256):
        (int('3164061777193421244945967689185130966883791527930581656543940136'
             '9851564103057893770550122576420376933644344013305735603610942719'
             '0293352994823217443809706583073604061570104365238910634862640398'
             '1679210161833377863606275689118136475272813790454847601448227296'
             '1343536419929610738993809045350019003864284827404321049159705788'
             '9549545448366098569990308459383369877789053024383489750444816799'
             '7655021762159487052492596584201043454441595097537258007948592233'
             '9750333178270807875426129993868319748210561432141824552116718686'
             '0976690334031413657227645931573832903180613929329282084779414766'
             '06239373677116746259950456018096483609849'),
         int('1153325196737607230690138460423355902719413005219740664797410759'
             '18190885248303'),
         int('7143867109100500724655889012222798175962488212042071017782036283'
             '2160817495693770539655258112318947749347515155155134204134719860'
             '8823601342715098633684772359506724876037827905133950825065353901'
             '6405352814524900241330050570097484028566246867839194943420499621'
             '1140731561135100139686370478680923000451515444292933075274771723'
             '2158242525416346441387350251926607224043098576684471584941118008'
             '0093586361720527555676600988059377305427568792372489422765662230'
             '0215335648878955714422647428480609353107064891801250653532699120'
             '7943263490377529076378752274796636215661586231670013411198731440'
             '2786085224329787545828730362102716455591')),
    (3072, 256):
        (int('5011331712233683835093723941595402419070338130242797744775621546'
             '3641536864969353903102004356073712677732508446041456550294724007'
             '0093275611244890844543291202585725917329287701409190285145857918'
             '7876960919154616853933754143035568959887794581079829550252337328'
             '9586727717731036278075356868480775339095391819421548924913762254'
             '4670155780778627973800036143652657423480713966346454461763326282'
             '1163472926178000722793989413146129295502816796017282820346088132'
             '1425741840312658812629274031652062965804000640023225342007706903'
             '9559753951604611153643975521644534909192316141369312591761980409'
             '4378122540834470089983733373087183465258929342043316322228810332'
             '1912380000210289279280777669508959410453638792915841181907416904'
             '9664005943287081937140339847971819402613934290973327170950824641'
             '1404986603902984352525784219475998683062604686990072930868940095'
             '3736065741611124129704714207860823874500561240603271472604763441'
             '90199063138418652848242993073'),
         int('1123729320865994341343697639536734437969570623189975075768375094'
             '40043857821751'),
         int('2494390990654102209916939819384082893644403274389838852685454343'
             '2784446696136884919632394741770659129075643528994069477626182897'
             '2106886953167478569957039351375452954531380154613944243474096742'
             '6047384626129763238976731604687718759627856769848759896915603076'
             '1825283701997530663975066246351467163593263337661788759174778922'
             '1259924060851907234487664312664566345451119745610932701881678913'
             '4597676038226400200783846386271229700185443115318815205755288556'
             '7328286749115270382299589637081404965889043679394178671436373006'
             '1861531270317737797746689866960412864974460485658102271405575627'
             '5398117863185475612953302718672046518413657257810027892777245934'
             '3667012169956462752123869289058661750992165696248893595358869316'
             '6793600902738030674491853536541253794547359266112670940796268692'
             '6245172881548592328614635518183927001518433713578299289672851938'
             '0515785696867559488723193536083482142402245271342824332445999840'
             '81854899767747955596855601444')),
    (4096, 256):
        (int('1008477630155069467478900571990477154761700663584974593792008488'
             '8826919041614280337598459514867057139862036497434214229396456695'
             '2112905102572090639670794704991478170872850594310317941586697547'
             '5075149835567737150059951792715844886752519086287857600623604746'
             '1352457202046857625742963556491238776842659662112525811882133776'
             '5545716137498802645339997141486454432180477615726020307873780084'
             '7654780148541673023051285667108153563373818439065174095757218204'
             '8277834652635352679495622629250904338165580655291994544274819635'
             '9953033903583897941951809953246334929431524745416044241466614899'
             '8494042562155787403413704480222950446906343194712546991414633153'
             '1377802100852041235408065413361704837013507220793583405264156999'
             '2425793618073315716467863683927925316903583182123169882824680761'
             '7146066763010106567440512299679532092309182497664707523572966083'
             '9695830049249568869746360320191102431600511560347600370637866972'
             '8937167267021796620186171000829224747028152664859633293627218605'
             '9227370912949998891436693466705090038035078481299344239612503010'
             '2476401252879332133844267421025681922228599434087096062678780555'
             '5133903600190321667521191422094440558570807046165652839576107003'
             '2879774705659501221250050324085538088642743051214789340591257745'
             '598492753305349917'),
         int('6463462623598571846178794766107481608318498544939763029705946357'
             '3359850605847'),
         int('3561518863819745686742239979317471563522909235918127470911863237'
             '1149575016058864031904111818701269075003068516197535287662983983'
             '9946603747465818655312322561406352018009305578886964184926147305'
             '2894296750731485384357391871379475931453852768199283713957368210'
             '0263078574362731903382051383122125359981068374872034173271357754'
             '8152727062567207141941898792468371290213168106375788081403315320'
             '4732959641850135328486177840337587738562577608640816862326193325'
             '7855134539910836862254985505203133054093856561576288145712715670'
             '2844282946167494540031015301842908149103186166365695230775864701'
             '6634456231503285098768361134226820655376748324624461194811558095'
             '1846599166481945900694730434157548694114827729267158115548523978'
             '2300758306735022560734591145920018558704221497665947051791010233'
             '4713527918526996162949099971001473763823318042168535542036377565'
             '3643697884800695488792870631158629155049326361487590646256595517'
             '6699943929043978480889836643850621132100743866860189889147364854'
             '1216392942569522338536503835321590166520863578974881899703702584'
             '0766139657175826387378226371727856237588033429840099228692922946'
             '3892784559058111089868962550209264295780371851263808100970815376'
             '9450556157703545572545828703445962224316188536406802712922207522'
             '22727785032194722'))
}


# TODO: deprecate DsaTestCase
@dataclass
class DsaTestCase:
  privkey: dsa.DsaPrivateKey
  pubkey: dsa.DsaPublicKey = None
  message: bytes = None
  r: int = None
  s: int = None

  def public_key(self):
    return self.pubkey or self.privkey.public_key()


test1 = DsaTestCase(
    privkey=key1024('SHA-1'),
    message=b'123400',
    r=972895582100589432818159100217087776602656922442,
    s=419194261835132380781993255199459863548852063291)

test2 = DsaTestCase(
    privkey=key2048('SHA-224'),
    message=b'Hello',
    r=3186398211740781694310613626741918198156630052305929303493306796493,
    s=18313786847032669646920380838679308906502722197538571503399266181686)

test3 = DsaTestCase(
    privkey=key2048('SHA-256'),
    message=b'Test',
    r=16369435357577375309002357701371519189077032001917380531327138655891,
    s=10100163661780724635629604536004533624915333243648006394541913583894)

TEST_CASES = (test1, test2, test3)


def get_test_key(sizep: int, sizeq: int, md: int) -> dsa.DsaPrivateKey:
  """Returns a precomputed test key for given parameters.

  The function contains a bit of legacy stuff, so that test vectors
  do not change too much between version.

  Args:
    p: the size of the field
    q: the size of the subgroup
    md: the hash function (e.g. "SHA-256")

  Returns:
    a precomputed test key
  """
  if sizep == 1024 and sizeq in (0, 160):
    return key1024(md)
  elif sizep == 2048 and sizeq in (0, 224):
    return key2048(md)
  elif (sizep, sizeq) in TEST_PARAMS:
    p, q, g = TEST_PARAMS[sizep, sizeq]
    x = prand.randrange(1, q - 1, 'kl12j4lxuywq')
    return dsa.DsaPrivateKey(md=md, p=p, q=q, g=g, x=x)
